name: Deployment Pipeline

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (default: latest)'
        required: false
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - uses: actions/checkout@v3

      - name: Set Image Tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Stop existing containers
            docker-compose down || true

            # Pull latest images
            docker pull ${{ secrets.DOCKER_USERNAME }}/hello-world-backend:${{ steps.tag.outputs.image_tag }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/hello-world-frontend:${{ steps.tag.outputs.image_tag }}

            # Create .env file with secrets
            cat > .env << EOF
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            IMAGE_TAG=${{ steps.tag.outputs.image_tag }}
            MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}
            MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
            EOF

            # Create docker-compose.yml if not exists
            cat > docker-compose.yml << EOF
            version: '3.8'

            services:
              mongodb:
                image: mongo:latest
                environment:
                  MONGO_INITDB_ROOT_USERNAME: \${MONGO_USERNAME}
                  MONGO_INITDB_ROOT_PASSWORD: \${MONGO_PASSWORD}
                ports:
                  - "27017:27017"
                volumes:
                  - mongodb_data:/data/db

              backend:
                image: \${DOCKER_USERNAME}/hello-world-backend:\${IMAGE_TAG}
                ports:
                  - "3000:3000"
                environment:
                  MONGODB_URI: mongodb://\${MONGO_USERNAME}:\${MONGO_PASSWORD}@mongodb:27017/helloworld?authSource=admin
                depends_on:
                  - mongodb

              frontend:
                image: \${DOCKER_USERNAME}/hello-world-frontend:\${IMAGE_TAG}
                ports:
                  - "80:80"
                depends_on:
                  - backend

            volumes:
              mongodb_data:
            EOF

            # Start services with environment variables
            docker-compose --env-file .env up -d

            # Wait for services to be healthy
            sleep 30

            # Check if services are running
            docker-compose ps

            # Clean up .env file for security
            rm -f .env

      - name: Health Check
        run: |
          # Simple health check (adjust URL as needed)
          sleep 60
          curl -f http://${{ secrets.HOST }}/health || exit 1

  # Optional: Kubernetes Deployment
  deploy-k8s:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ vars.ENABLE_K8S_DEPLOY == 'true' }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Configure kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy with Helm
        working-directory: helm
        run: |
          helm upgrade --install hello-world ./hello-world \
            --namespace production \
            --create-namespace \
            --set backend.image.tag=${{ steps.tag.outputs.image_tag }} \
            --set frontend.image.tag=${{ steps.tag.outputs.image_tag }} \
            --set mongodb.auth.rootUsername=${{ secrets.MONGO_USERNAME }} \
            --set mongodb.auth.rootPassword=${{ secrets.MONGO_PASSWORD }} \
            --wait
