name: Continuous Delivery

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if CI failed'
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event.inputs.force_build == 'true' }}
    env:
      NODE_VERSION: "22"

    steps:
      # 1. Repository Setup
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Semantic Versioning
      - name: Generate Version
        id: version
        working-directory: app
        run: |
          VERSION=$(node -p "require('./package.json').version")
          DATETIME=$(date -u +"%Y-%m-%d-%H-%M-%S")
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          BUILD_VERSION="${VERSION}-${DATETIME}-${SHORT_SHA}"
          
          echo "version=${BUILD_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${BUILD_VERSION}"

      # 3. Docker Setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Build Application (optional - kann übersprungen werden da keine Build-Schritte nötig)
      - name: Verify App Structure
        working-directory: app
        run: |
          echo "Überprüfe Anwendungsstruktur..."
          ls -la
          echo "App bereit für Docker Build"

      # 5. Docker Build and Push
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/sprachenlern-app:latest
            ${{ secrets.DOCKER_USERNAME }}/sprachenlern-app:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=Sprachenlern App
            org.opencontainers.image.description=Deutsch-Vietnamesischer Vokabeltrainer
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}

      # 6. Delivery Summary
      - name: Delivery Summary
        run: |
          echo "Continuous Delivery abgeschlossen!"
          echo "Docker Images erstellt und gepusht:"
          echo "   - ${{ secrets.DOCKER_USERNAME }}/sprachenlern-app:latest"
          echo "   - ${{ secrets.DOCKER_USERNAME }}/sprachenlern-app:${{ steps.version.outputs.version }}"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Bereit für Deployment"

      # 7. Create GitHub Release (optional)
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Version ${{ steps.version.outputs.version }}

            ### Changes
            - Build triggered by commit ${{ github.sha }}

            ### Docker Images
            - `${{ secrets.DOCKER_USERNAME }}/sprachenlern-app:${{ steps.version.outputs.version }}`
            - `${{ secrets.DOCKER_USERNAME }}/sprachenlern-app:latest`

            ### Deployment
            Ready for deployment via Continuous Deployment pipeline.
          draft: false
          prerelease: false
