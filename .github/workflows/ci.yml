# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Backend Build und Test
  backend:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: "22"

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./backend/package-lock.json"

      - name: Install Backend Dependencies
        working-directory: backend
        run: npm ci

      - name: Lint Backend
        working-directory: backend
        run: npm run lint
        continue-on-error: true

      - name: Test Backend (with Mocks)
        working-directory: backend
        run: npm test
        env:
          NODE_ENV: test

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage
          path: backend/coverage/

      - name: Build Backend
        working-directory: backend
        run: npm run build

  # Frontend Build und Test
  frontend:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: "22"

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm ci

      - name: Lint Frontend
        working-directory: frontend
        run: npm run lint
        continue-on-error: true

      - name: Test Frontend
        working-directory: frontend
        run: npm run test:ci

      - name: Build Frontend
        working-directory: frontend
        run: npm run build

      - name: Upload Frontend Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

  # Docker Build and Push
  docker:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Version Tag
        id: version
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          VERSION_TAG=$(date +%Y%m%d)-${SHORT_SHA}
          echo "version=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "Generated version tag: ${VERSION_TAG}"

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/hello-world-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/hello-world-backend:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/hello-world-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/hello-world-frontend:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests (optional - nur wenn Docker Images verfÃ¼gbar sind)
  integration-tests:
    needs: [docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Test with Real MongoDB
        run: |
          docker run --rm --network host \
            -e MONGODB_URI=mongodb://testuser:testpass@localhost:27017/test?authSource=admin \
            ${{ secrets.DOCKER_USERNAME }}/hello-world-backend:latest \
            npm test || echo "Integration tests completed"
